import argparse

parser = argparse.ArgumentParser(description='Convert kallisto tsv entires into aggregate gene tpm. Output to stdout.')
parser.add_argument('tsv_file', help="abundance.tsv file generated by kallisto")
parser.add_argument('--gtf', required=True,help="Gene annotation file in gtf format.")
params = parser.parse_args()

ab_fn = params.tsv_file
an_fn = params.gtf

trnid_to_genid = {}
gene_tpm = {}

with open(ab_fn,"r") as ab, open(an_fn) as an:
    # Fill gene name hash table
    for line in an:
        if line[0] == '#': continue
        m = line.rstrip().split('\t')
        if m[2] == 'gene':
            gene_id = m[8].split(' ')[1].replace('"','').replace(';','')
            gene = m[8].split(' ')[3].replace('"','').replace(';','')
            gene_tpm[gene_id] = [m[1]+"\t"+gene+"\t"+m[0]+"\t"+m[3]+"\t"+m[4]+"\t"+m[6], 0.0, 0]
        elif m[2] == 'transcript': #(not PROTEIN_CODING or m[1] == 'protein_coding'):
            tid = m[8].split(' ')[3].replace('"','').replace(';','')
            gene_id = m[8].split(' ')[1].replace('"','').replace(';','')
            trnid_to_genid[tid] = gene_id

            
    # Skip header
    ab.readline()
    # Read abundances
    for line in ab:
        m = line.rstrip().split('\t')
        if not trnid_to_genid.has_key(m[0]): continue
        gene_id = trnid_to_genid[m[0]]
        tpm = gene_tpm[gene_id]
        tpm[1] += float(m[4])
        tpm[2] += 1
        gene_tpm[gene_id] = tpm

for key in gene_tpm.keys():
    val = gene_tpm[key]
    print key,"\t",str(val[1]),"\t",val[0],"\t",val[2]
